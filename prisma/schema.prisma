// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js" 
  previewFeatures = ["referentialActions"]
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password  String?
}

model ProductCharacteristic {
  id              Int      @default(autoincrement()) @id
  name            String
  value           String
  product         Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       Int
}

model Product {
  id              Int      @default(autoincrement()) @id
  image           String?
  title           String
  link            String?
  initialRating   Int
  price           Int
  oldPrice        Int?
  credit          Int?
  description     String?
  advantages      String[]
  disAdvantages   String[]
  categories      String[]
  tags            String[]
  characteristics ProductCharacteristic[]
  reviews         Review[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
  firstCategory   TopLevelCategory @default(Courses)
}

model Review {
  id  Int      @default(autoincrement()) @id
  title String
  name String
  description String
  rating Int
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

enum TopLevelCategory {
  Courses
  Services
  Books
}

model HhData {
  id            Int @default(autoincrement()) @id
  count         Int
  juniorSalary  Int?
  middleSalary  Int?
  seniorSalary  Int?
  updatedAt     DateTime @updatedAt @default(now())
  topPageId     Int?
  topPage       TopPage? @relation(fields: [topPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model TopPageAdvantage {
  title       String @id
  description String
  topPageId   Int
  topPage     TopPage @relation(fields: [topPageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model TopPage {
  id  Int         @default(autoincrement()) @id
  firstCategory   TopLevelCategory
  secondCategory  String
  alias           String  @unique
  title           String
  metaTitle       String
  metaDescription String
  category        String
  hh              HhData?
  advantages      TopPageAdvantage[]
  seoText         String?
  tagsTitle       String
  tags            String[]
  createdAt       DateTime @default(now())
}